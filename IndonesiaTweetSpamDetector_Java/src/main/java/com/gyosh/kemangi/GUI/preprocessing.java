package com.gyosh.kemangi.GUI;

import com.gyosh.kemangi.ui.KemangiProcess;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mindo florida
 */
public class preprocessing extends javax.swing.JFrame {
     static int rowWritten=0;

    /**
     * Creates new form preprocessing
     */
    public preprocessing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        inputlabel = new javax.swing.JLabel();
        tfInputtweet = new javax.swing.JTextField();
        bInputtweet = new javax.swing.JButton();
        bPreprocessing = new javax.swing.JButton();
        progressBarpreprocessing = new javax.swing.JProgressBar();
        bResult = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        linputresultpre = new javax.swing.JLabel();
        limputmodel = new javax.swing.JLabel();
        tfresultpre = new javax.swing.JTextField();
        tfmodel = new javax.swing.JTextField();
        bResultpre = new javax.swing.JButton();
        bModel = new javax.swing.JButton();
        bClassify = new javax.swing.JButton();
        progressBardetection = new javax.swing.JProgressBar();
        scrollpaneSpam = new javax.swing.JScrollPane();
        taSpam = new javax.swing.JTextArea();
        scrollpaneNonspam = new javax.swing.JScrollPane();
        taNonspam = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bSeemore = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setText("Indonesian Twitter Spam Detection");

        inputlabel.setText("Input Tweets");

        tfInputtweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfInputtweetActionPerformed(evt);
            }
        });

        bInputtweet.setText("Browse");
        bInputtweet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInputtweetActionPerformed(evt);
            }
        });

        bPreprocessing.setText("Preprocessing");
        bPreprocessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPreprocessingActionPerformed(evt);
            }
        });

        progressBarpreprocessing.setStringPainted(true);

        bResult.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        bResult.setText("see result");
        bResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inputlabel)
                        .addGap(18, 18, 18)
                        .addComponent(tfInputtweet, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(bInputtweet))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(bPreprocessing))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(progressBarpreprocessing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(bResult)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputlabel)
                    .addComponent(tfInputtweet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bInputtweet))
                .addGap(32, 32, 32)
                .addComponent(bPreprocessing)
                .addGap(29, 29, 29)
                .addComponent(progressBarpreprocessing, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bResult, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(266, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Preprocessing", jPanel1);

        linputresultpre.setText("Input Preprocessing Result");

        limputmodel.setText("Input Model Final");

        bResultpre.setText("Browse");
        bResultpre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResultpreActionPerformed(evt);
            }
        });

        bModel.setText("Browse");
        bModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModelActionPerformed(evt);
            }
        });

        bClassify.setText("Classify");
        bClassify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClassifyActionPerformed(evt);
            }
        });

        progressBardetection.setStringPainted(true);

        taSpam.setColumns(20);
        taSpam.setRows(5);
        scrollpaneSpam.setViewportView(taSpam);

        taNonspam.setColumns(20);
        taNonspam.setRows(5);
        scrollpaneNonspam.setViewportView(taNonspam);

        jLabel3.setText("Spam ");

        jLabel5.setText("Non Spam");

        bSeemore.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        bSeemore.setText("see more");
        bSeemore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSeemoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(311, 311, 311)
                        .addComponent(bClassify))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(linputresultpre)
                            .addComponent(limputmodel))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfresultpre)
                            .addComponent(tfmodel, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bResultpre)
                            .addComponent(bModel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(276, 276, 276)
                .addComponent(progressBardetection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(283, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(scrollpaneSpam, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                        .addComponent(scrollpaneNonspam)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(bSeemore)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linputresultpre)
                    .addComponent(tfresultpre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bResultpre))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limputmodel)
                    .addComponent(tfmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bModel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bClassify)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBardetection, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollpaneSpam, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollpaneNonspam, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(bSeemore, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Detection", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bInputtweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInputtweetActionPerformed
        // TODO add your handling code here:
        //JFileChooser openFile = new JFileChooser();
        //openFile.showOpenDialog(null);
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(true);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            tfInputtweet.setText(file.getAbsolutePath());
            System.out.println("path " + file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }   
    }//GEN-LAST:event_bInputtweetActionPerformed

    private void bResultpreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResultpreActionPerformed
        // TODO add your handling code here:
        //JFileChooser openFile = new JFileChooser();
        //openFile.showOpenDialog(null);
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(true);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            tfresultpre.setText(file.getAbsolutePath());
            System.out.println("path " + file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }   
    }//GEN-LAST:event_bResultpreActionPerformed

    private void bModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModelActionPerformed
        // TODO add your handling code here:
        //JFileChooser openFile = new JFileChooser();
        //openFile.showOpenDialog(null);
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(true);
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            tfmodel.setText(file.getAbsolutePath());
            System.out.println("path " + file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }   
    }//GEN-LAST:event_bModelActionPerformed

    //PREPROSES TWEET INPUT
    private void bPreprocessingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPreprocessingActionPerformed
        // TODO add your handling code here:
        //do preprocess in this event
        try{
        System.out.println("working");
        KBBAexec();
        TranslateEnglish();
        NormalText();
        KemangiProcessing();
        CreateNGram();
        System.out.println("clear!");
        }
        catch(Exception e){
        e.printStackTrace();
        }        
        new Thread(new Tempo()).start();
    }//GEN-LAST:event_bPreprocessingActionPerformed

    private void KBBAexec() throws IOException{
            HashMap<String,String> hmapN1=new HashMap<>();
            try{
            Scanner input;
            File file = new File("kbba.txt");
            input = new Scanner(file);
            
            while (input.hasNextLine()) {
                String line = input.nextLine();
                String [] arr =line.split("\t");
                int length=arr.length;
                String [] arr2 =arr[length-1].split(" ");
                length=arr2.length;
                hmapN1.put(arr[0], arr2[length-1]);
            }
            input.close();
            //disini dia menerjemahkan alay nya
            // diambil dari hmapN1            
            //iterate through file
            BufferedReader br = new BufferedReader(new FileReader(new File(tfInputtweet.getText())));
            String verify;
            file = new File("afterKBBA.csv");
            file.createNewFile();
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            while( (verify=br.readLine()) != null ){
                if(verify != null){
                    String putData="";
                    String [] arr =verify.split(" ");
                    for ( String kata : arr) {
                    if(hmapN1.containsKey(kata)){
                        putData+=hmapN1.get(kata)+" ";
                    }
                    else{
                        putData+=kata+" ";
                    }                    
                    }
                    bw.write(putData);
                    bw.newLine();
                    bw.flush();
                }
            }
            br.close();
        } catch (FileNotFoundException ex) {
        }    
    }
    
    private void TranslateEnglish() throws FileNotFoundException{
            ResultTranslate terjemah=new ResultTranslate();
            try{
            BufferedReader br = new BufferedReader(new FileReader(new File("afterKBBA.csv")));
            String verify;
            File file = new File("TranslateEnglish.csv");
            file.createNewFile();
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            while( (verify=br.readLine()) != null ){
                if(verify != null){
                    String putData="";
                    String [] arr =verify.split(" ");
                    for ( String kata : arr) {
                    try{
                        putData+=terjemah.translate(kata)+" ";
                    }
                    catch(Exception e1){
                        putData+=kata+" ";
                    }
                    }
                    bw.write(putData);
                    bw.newLine();
                    bw.flush();
                }
            }
            br.close();
            }
            catch(Exception e){
                e.printStackTrace();
            }    
    }    
    
    private void NormalText() throws FileNotFoundException{
// TODO code application logic here
        String regexlink= "\\b(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";
//        String regexakunuser="^@\\w+|\\s@\\w+";
        String regexakunuser="@\\w+|\\s@\\w+";
        BufferedReader br = new BufferedReader(new FileReader(new File("TranslateEnglish.csv")));
         try{
            String verify, putData;
            File file = new File("TextNormal.csv");
            file.createNewFile();
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            while( (verify=br.readLine()) != null ){ //***editted
                       //**deleted**verify = br.readLine();**
                if(verify != null){ //***edited
                    putData = verify.replaceAll(regexlink, "tautan");
                    putData = putData.replaceAll(regexakunuser, " akunuser");
                    if(putData.substring(0, 1).equals(" ")){
                    putData=putData.substring(1);//omit space at begining
                    }
                    putData = putData.replaceAll("@", "di");//@ diubah menjadi di
                    putData = cleanSymbol(putData);
                    bw.write(putData.substring(1));
                    bw.newLine();
                    bw.flush();
                }
            }
            br.close();


        }catch(IOException e){
        }    
    }
    
    static String cleanSymbol(String kalimat){
        String regexsymbol="[^0-9A-Za-z]";
        String builder="";
        String temp;
        String [] arr =kalimat.split(" ");
        for ( String kata : arr) {
           temp=kata;
           if(kata.equals("") || kata.equals(" ")){continue;}
           kata = kata.replaceAll(regexsymbol, "");
           if(kata.equals("")){
               builder+=" simbol";
           }
           else{
               builder+=" "+temp;
           }
          }
        return builder;
    }    
    
    private void KemangiProcessing() throws FileNotFoundException, IOException, InterruptedException{
        BufferedReader br = new BufferedReader(new FileReader(new File("TextNormal.csv")));
        String verify;
        File file = new File("tweetresult.txt");
        file.createNewFile();
        file= new File("tweet.txt");
        file.createNewFile();
        FileWriter fw = new FileWriter(file);
        BufferedWriter bw = new BufferedWriter(fw);
        try{
            while( (verify=br.readLine()) != null ){
                if(verify != null){
                    bw.write(verify); //tulis tweet ke file
                    bw.newLine();
                    bw.flush();
                }
            }
            br.close();
        }
        catch(Exception e){
        }
        
        //panggil tweet dan tweetresult yg digenerate diatas
        new KemangiProcess();//menjalankan fungsi fungsi dari kemangi
        file = new File("CleanTweet.csv");
        file.createNewFile();
        fw = new FileWriter(file);
        bw = new BufferedWriter(fw);
        Scanner input = new Scanner(new File("tweetresult.txt"));//set this back to tweetresult
        try{
            while (input.hasNextLine()) {
                String line = input.nextLine();
                bw.write(line);
                bw.newLine();
                bw.flush();
            }
            bw.close();
            br.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }

    private void CreateNGram() throws IOException, ClassNotFoundException{
    System.out.println("Starting...");
        HashMap<String,Integer> hmapN1=new HashMap<>();
        //HashMap<String,Integer> hmapN2=new HashMap<>();
        List<HashMap<String,Integer>> listOfMapN1occurence=new ArrayList<>();
        /*List<HashMap<String,Integer>> listOfMapN1existence=new ArrayList<>(); 
        List<HashMap<String,Integer>> listOfMapN2occurence=new ArrayList<>(); 
        List<HashMap<String,Integer>> listOfMapN2existence=new ArrayList<>(); 
        */
        try {
            Scanner input;
            File file = new File("CleanTweet.csv");

            input = new Scanner(file);
            while (input.hasNextLine()) {
                String line = input.nextLine();
                String [] arr =line.split(" ");
                int i=0,length=arr.length;
            for ( String kata : arr) {
                if(!hmapN1.containsKey(kata)){//filling word collection for N=1
                    if(!kata.isEmpty())
                    {hmapN1.put(kata, 0);}
                }
                /*if(length-1!=i){//kecuali kata terakhir, untuk n=2
                    String temp=arr[i]+"-"+arr[i+1];
                if(!hmapN2.containsKey(temp)){//filling word collection for N=2
                    hmapN2.put(temp, 0);
                    }
                }*/
                i++;//kata ke-i pada kalimat
                }
            }
            input.close();
            
            //System.out.println(hmapN2.size());
            
                FileInputStream fis = new FileInputStream("WordN1Chi2.ser");
                ObjectInputStream ois = new ObjectInputStream(fis);
                hmapN1 = (HashMap) ois.readObject();
                ois.close();
                fis.close();            
                
            file = new File("CleanTweet.csv");
            input = new Scanner(file);
            int limited=0;//number of tweet want to be modeled from the file
            boolean fileCreated=false;
                HashMap<String,Integer> tempmapN1;
  /*              HashMap<String,Integer> tempmapN2=(HashMap<String,Integer>) hmapN2.clone();
                HashMap<String,Integer> tempmapN1E=(HashMap<String,Integer>) hmapN1.clone();
                HashMap<String,Integer> tempmapN2E=(HashMap<String,Integer>) hmapN2.clone();
*/
            while (input.hasNextLine()) {
                tempmapN1=(HashMap<String,Integer>) hmapN1.clone();
                limited++;
                String line = input.nextLine();
                String [] arr =line.split(" ");
                int i=0,length=arr.length;
                for ( String kata : arr) {
                    if(tempmapN1.containsKey(kata)){//if word is in map N=1
                        tempmapN1.put(kata, tempmapN1.get(kata)+1);//count the word occurence
                        //tempmapN1E.put(kata, 1); // check word existence
                    }
                    /*if(length-1!=i){
                        String temp=arr[i]+"-"+arr[i+1];
                    if(tempmapN2.containsKey(temp)){//if word is in map N=2
                        tempmapN2.put(temp, tempmapN2.get(temp)+1);//count the word occurence
                        tempmapN2E.put(temp, 1);//check word existence
                       }
                    }*/
                i++;
                }
                listOfMapN1occurence.add(new HashMap<>(tempmapN1));
/*                listOfMapN1existence.add(tempmapN1E);
                listOfMapN2occurence.add(tempmapN2);
                listOfMapN2existence.add(tempmapN2E);*/
                tempmapN1.clear();
                if(limited>1 && !fileCreated){//create the file here
                    GenerateCsvFile(listOfMapN1occurence,1,"o");
                    fileCreated=true;
                    listOfMapN1occurence.clear();
                    limited=0;
                }
                if((limited>100 && fileCreated) || (!input.hasNextLine()&& fileCreated)){//append to fie
                    AppendCsvFile(listOfMapN1occurence,1,"o");
                    listOfMapN1occurence.clear();
                    limited=0;
                    System.out.println(rowWritten);
                }
            }
            input.close();

      /* Display content using Iterator*/
    /*  Set set = hmapN2.entrySet();
      Iterator iterator = set.iterator();
      while(iterator.hasNext()) {
         Map.Entry mentry = (Map.Entry)iterator.next();
         System.out.print("key is: "+ mentry.getKey() + " & Value is: ");
         System.out.println(mentry.getValue());
      }*/
            System.out.println("OK");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }
    
    //N -> value of n 1 or 2  , mode -> value of mode e or o for existence and occurence
    static void GenerateCsvFile(List<HashMap<String,Integer>> listword,int N, String mode){
        try
	{            
            int jumlahKata=listword.get(0).size();//counter agar kata terakhir tanpa koma
	    FileWriter writer = new FileWriter("ngram"+N+""+mode+".csv");
            Iterator<Map.Entry<String,Integer>> iter = listword.get(0).entrySet().iterator();
             while (iter.hasNext()){
                jumlahKata--;//counter agar kata terakhir tanpa koma
                Map.Entry<String,Integer> entry = iter.next();
                if(!entry.getKey().isEmpty()){
                    writer.append(entry.getKey());
                    if(jumlahKata!=0){
                    writer.append(',');}
                    writer.flush();//to prevent too much data get buffered
                }
            }
	    writer.append('\n');
            
            for(int i=0;i<listword.size();i++){
            jumlahKata=listword.get(0).size();
            for(Map.Entry<String,Integer> entry : listword.get(i).entrySet()){
                jumlahKata--;
                writer.append(entry.getValue()+"");
                if(jumlahKata!=0){
                    writer.append(",");
                }
                writer.flush();//to prevent too much data get buffered
            }
	    writer.append('\n');
            rowWritten++;//count the row that written to file
            writer.flush();//to prevent too much data get buffered
            }
            writer.flush();
	    writer.close();
	}
	catch(IOException e)
	{
            e.printStackTrace();
	}
    }    
    
    static void AppendCsvFile(List<HashMap<String,Integer>> listword,int N, String mode){
        try
	{
	    FileWriter writer = new FileWriter("ngram"+N+""+mode+".csv",true);
            for(int i=0;i<listword.size();i++){
                int jumlahKata=listword.get(0).size();//counter agar kata terakhir tanpa koma
            for(Map.Entry<String,Integer> entry : listword.get(i).entrySet()){
                jumlahKata--;
                writer.append(entry.getValue()+"");
                if(jumlahKata!=0){
                writer.append(",");}
                writer.flush();//to prevent too much data get buffered
            }
            rowWritten++;
	    writer.append('\n');
            writer.flush();//to prevent too much data get buffered
            }
	    writer.flush();
	    writer.close();
	}
	catch(IOException e)
	{
            e.printStackTrace();
	}
    }
    
    private void tfInputtweetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfInputtweetActionPerformed
        // TODO add your handling code here:
        //JFileChooser fc = new JFileChooser();
        //File selectedFile = fc.getSelectedFile();
        //System.out.println();
        //String filename = tfInputtweet.getSelectedText();
        //        .getSelectedFile().getName();
    }//GEN-LAST:event_tfInputtweetActionPerformed

    //DETEKSI SPAM // consume or call python service
    private void bClassifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClassifyActionPerformed
        // TODO add your handling code here:
        callPythonDetection();
        try{
        File file = new File("E:\\JAVAPYTHON\\hasil_detection_baru.csv");
        Scanner input = new Scanner(file);
        String line;
        line=input.nextLine();
        taSpam.setText(line);
        taNonspam.setText(line);
        taSpam.append("\n");
        taNonspam.append("\n");
        while (input.hasNextLine()) {
            line=input.nextLine();
            if(line.charAt(line.length()-1)=='s'){
                taSpam.append(line);
                taSpam.append("\n");                
            }
            else{
                taNonspam.append(line);
                taNonspam.append("\n");
            }
        }
        input.close();
        }
        catch(Exception e){
            e.printStackTrace();
        }
        

    }//GEN-LAST:event_bClassifyActionPerformed

    private void callPythonDetection(){
        HttpURLConnection connection = null; 
        //send string -> parameter dari url dengan kata 'no'
        //make it ready to be a link
        String temp=tfresultpre.getText();
        temp=temp.replace("\\", "/");
        temp=temp.replace(" ", "%20");
        String send_input="input="+temp;
        temp=tfmodel.getText();
        temp=temp.replace("\\", "/");
        temp=temp.replace(" ", "%20");
        String send_model="model="+temp;
        try {	  //for multiple "http://www.website.com?field1=value1&field2=value2&field3=value3"
          //localhost:5000/hello?no=parsetheparameter -> default
          URL url = new URL("http://localhost:5000/hello?"+send_input+"&"+send_model);
          //String urlParameters = "fName=" + URLEncoder.encode(send_string, "UTF-8");
          connection = (HttpURLConnection)url.openConnection();
          connection.setRequestMethod("GET");//GET method

          if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
			System.out.println("none");
			}
          int responseCode = connection.getResponseCode();
          System.out.println("Response Code : " + responseCode);

          BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
          String inputLine;
          StringBuffer response = new StringBuffer();
          int i=0;
           while ((inputLine = in.readLine()) != null) {
           	i++;
           	if(i==3){
			response.append(inputLine);
			System.out.println(response.toString());
			}
			}
			in.close();          
                
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("KONEKSI GAGAL");
            //return null;
        }finally {
            if(connection != null) {
                connection.disconnect(); 
            }        
    }    
    }
    
    //LOAD HASIL PREPROSES
    private void bResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResultActionPerformed
        // TODO add your handling code here:
        //LOAD HASIL DARI PREPROSES
        File file = new File("ngram1o.csv");
        try {
            Desktop.getDesktop().open(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_bResultActionPerformed

    //LIHAT HASIL DARI DETEKSI DALAM FILE
    private void bSeemoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSeemoreActionPerformed
        // TODO add your handling code here:
        File file = new File("E:\\JAVAPYTHON\\hasil_detection_baru.csv");
        try {
            Desktop.getDesktop().open(file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_bSeemoreActionPerformed
    
    /*public preprocessing(String label) {
        super(label);

        setForeground(Color.BLUE.darker());
        setCursor(new Cursor(Cursor.HAND_CURSOR));
        addMouseListener(new HyperlinkLabelMouseAdapter());
    }*/
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(preprocessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new preprocessing().setVisible(true);
            }
        });

//        JLabel lSeeresult = new JLabel("see result");
//
//// To indicate the the link is clickable
//        lSeeresult.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
//
//        lSeeresult.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                try {
//                    Desktop.getDesktop().open(
//                            new File("see result"));
//                } catch (IOException e1) {
//
//                    e1.printStackTrace();
//                }
//            }
//        });

        JFrame frame = new JFrame();
        frame.add(new JLabel("File Chooser"), BorderLayout.NORTH);
        frame.setTitle("File Chooser");

        //lSeeresult.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }
    
     private class URLOpenAdapter extends MouseAdapter {
    }
    
    private class Tempo implements Runnable {

        @Override
        public void run() {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            for(int i=1; i<=100; i++){
                progressBarpreprocessing.setValue(i);
                progressBarpreprocessing.repaint();
            
                try {
                    Thread.sleep(50);
                    
                } catch (InterruptedException erro) {
                }
            }
        }
    }
    
    private class Tempo1 implements Runnable {

        @Override
        public void run() {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            for(int i=1; i<=100; i++){
                progressBardetection.setValue(i);
                progressBardetection.repaint();
            
                try {
                    Thread.sleep(50);
                    
                } catch (InterruptedException erro) {
                }
            }
        }
        
    }
    
    private void goWebsite(JLabel bSeeresult, final String url, String text) {
        bSeeresult.setText("<html> Website : <a href=\"\">"+text+"</a></html>");
        bSeeresult.setCursor(new Cursor(Cursor.HAND_CURSOR));
        bSeeresult.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                    try {
                            Desktop.getDesktop().browse(new URI(url));
                    } catch (Exception ex) {
                            //It looks like there's a problem
                    }
            }
        });
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bClassify;
    private javax.swing.JButton bInputtweet;
    private javax.swing.JButton bModel;
    private javax.swing.JButton bPreprocessing;
    private javax.swing.JButton bResult;
    private javax.swing.JButton bResultpre;
    private javax.swing.JButton bSeemore;
    private javax.swing.JLabel inputlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel limputmodel;
    private javax.swing.JLabel linputresultpre;
    private javax.swing.JProgressBar progressBardetection;
    private javax.swing.JProgressBar progressBarpreprocessing;
    private javax.swing.JScrollPane scrollpaneNonspam;
    private javax.swing.JScrollPane scrollpaneSpam;
    private javax.swing.JTextArea taNonspam;
    private javax.swing.JTextArea taSpam;
    private javax.swing.JTextField tfInputtweet;
    private javax.swing.JTextField tfmodel;
    private javax.swing.JTextField tfresultpre;
    // End of variables declaration//GEN-END:variables
}
